"""
✨ `Student_KeyOutput` returns the primary key fields of table type `Student`.

It has the same format as `Student_Key`, but is only used as mutation return value.
"""
scalar Student_KeyOutput
"""
✨ `Tutor_KeyOutput` returns the primary key fields of table type `Tutor`.

It has the same format as `Tutor_Key`, but is only used as mutation return value.
"""
scalar Tutor_KeyOutput
"""
✨ Generated data input type for table 'Student'. It includes all necessary fields for creating or upserting rows into table.
"""
input Student_Data {
  """
  ✨ Generated from Field `Student`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Student`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Student`.`tutorId` of type `UUID!`
  """
  tutorId: UUID
  """
  ✨ `_expr` server value variant of `tutorId` (✨ Generated from Field `Student`.`tutorId` of type `UUID!`)
  """
  tutorId_expr: UUID_Expr
  """
  ✨ Generated from Field `Student`.`tutor` of type `Tutor!`
  """
  tutor: Tutor_Key
  """
  ✨ Generated from Field `Student`.`address` of type `String!`
  """
  address: String
  """
  ✨ `_expr` server value variant of `address` (✨ Generated from Field `Student`.`address` of type `String!`)
  """
  address_expr: String_Expr
  """
  ✨ Generated from Field `Student`.`dob` of type `Date!`
  """
  dob: Date
  """
  ✨ `_date` server value variant of `dob` (✨ Generated from Field `Student`.`dob` of type `Date!`)
  """
  dob_date: Date_Relative
  """
  ✨ `_expr` server value variant of `dob` (✨ Generated from Field `Student`.`dob` of type `Date!`)
  """
  dob_expr: Date_Expr
  """
  ✨ Generated from Field `Student`.`email` of type `String!`
  """
  email: String
  """
  ✨ `_expr` server value variant of `email` (✨ Generated from Field `Student`.`email` of type `String!`)
  """
  email_expr: String_Expr
  """
  ✨ Generated from Field `Student`.`gender` of type `String!`
  """
  gender: String
  """
  ✨ `_expr` server value variant of `gender` (✨ Generated from Field `Student`.`gender` of type `String!`)
  """
  gender_expr: String_Expr
  """
  ✨ Generated from Field `Student`.`name` of type `String!`
  """
  name: String
  """
  ✨ `_expr` server value variant of `name` (✨ Generated from Field `Student`.`name` of type `String!`)
  """
  name_expr: String_Expr
  """
  ✨ Generated from Field `Student`.`phoneNo` of type `String!`
  """
  phoneNo: String
  """
  ✨ `_expr` server value variant of `phoneNo` (✨ Generated from Field `Student`.`phoneNo` of type `String!`)
  """
  phoneNo_expr: String_Expr
  """
  ✨ Generated from Field `Student`.`school` of type `String!`
  """
  school: String
  """
  ✨ `_expr` server value variant of `school` (✨ Generated from Field `Student`.`school` of type `String!`)
  """
  school_expr: String_Expr
  """
  ✨ Generated from Field `Student`.`status` of type `String!`
  """
  status: String
  """
  ✨ `_expr` server value variant of `status` (✨ Generated from Field `Student`.`status` of type `String!`)
  """
  status_expr: String_Expr
  """
  ✨ Generated from Field `Student`.`tuitionLoc` of type `String!`
  """
  tuitionLoc: String
  """
  ✨ `_expr` server value variant of `tuitionLoc` (✨ Generated from Field `Student`.`tuitionLoc` of type `String!`)
  """
  tuitionLoc_expr: String_Expr
  """
  ✨ Generated from Field `Student`.`type` of type `String!`
  """
  type: String
  """
  ✨ `_expr` server value variant of `type` (✨ Generated from Field `Student`.`type` of type `String!`)
  """
  type_expr: String_Expr
}
"""
✨ Generated filter input type for table 'Student'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Student_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Student_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Student_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Student_Filter!]
  """
  ✨ Generated from Field `Student`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Student`.`tutorId` of type `UUID!`
  """
  tutorId: UUID_Filter
  """
  ✨ Generated from Field `Student`.`tutor` of type `Tutor!`
  """
  tutor: Tutor_Filter
  """
  ✨ Generated from Field `Student`.`address` of type `String!`
  """
  address: String_Filter
  """
  ✨ Generated from Field `Student`.`dob` of type `Date!`
  """
  dob: Date_Filter
  """
  ✨ Generated from Field `Student`.`email` of type `String!`
  """
  email: String_Filter
  """
  ✨ Generated from Field `Student`.`gender` of type `String!`
  """
  gender: String_Filter
  """
  ✨ Generated from Field `Student`.`name` of type `String!`
  """
  name: String_Filter
  """
  ✨ Generated from Field `Student`.`phoneNo` of type `String!`
  """
  phoneNo: String_Filter
  """
  ✨ Generated from Field `Student`.`school` of type `String!`
  """
  school: String_Filter
  """
  ✨ Generated from Field `Student`.`status` of type `String!`
  """
  status: String_Filter
  """
  ✨ Generated from Field `Student`.`tuitionLoc` of type `String!`
  """
  tuitionLoc: String_Filter
  """
  ✨ Generated from Field `Student`.`type` of type `String!`
  """
  type: String_Filter
}
"""
✨ Generated first-row input type for table 'Student'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Student_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Student_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Student_Filter
}
"""
✨ Generated having input type for table 'Student'. This input allows you to filter groups during aggregate queries using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Student_Having {
  """
  Apply multiple Having conditions using `AND` logic.
  """
  _and: [Student_Having!]
  """
  Whether to apply DISTINCT to the aggregate function.
  """
  _distinct: Boolean
  """
  Negate the result of the provided Having condition.
  """
  _not: Student_Having
  """
  Apply multiple Having conditions using `OR` logic.
  """
  _or: [Student_Having!]
  """
  ✨ Generated from Field `Student`.`_count` of type `Int!`
  """
  _count: Int_Filter
  """
  ✨ Generated from Field `Student`.`address_count` of type `Int!`
  """
  address_count: Int_Filter
  """
  ✨ Generated from Field `Student`.`dob_count` of type `Int!`
  """
  dob_count: Int_Filter
  """
  ✨ Generated from Field `Student`.`email_count` of type `Int!`
  """
  email_count: Int_Filter
  """
  ✨ Generated from Field `Student`.`gender_count` of type `Int!`
  """
  gender_count: Int_Filter
  """
  ✨ Generated from Field `Student`.`id_count` of type `Int!`
  """
  id_count: Int_Filter
  """
  ✨ Generated from Field `Student`.`name_count` of type `Int!`
  """
  name_count: Int_Filter
  """
  ✨ Generated from Field `Student`.`phoneNo_count` of type `Int!`
  """
  phoneNo_count: Int_Filter
  """
  ✨ Generated from Field `Student`.`school_count` of type `Int!`
  """
  school_count: Int_Filter
  """
  ✨ Generated from Field `Student`.`status_count` of type `Int!`
  """
  status_count: Int_Filter
  """
  ✨ Generated from Field `Student`.`tuitionLoc_count` of type `Int!`
  """
  tuitionLoc_count: Int_Filter
  """
  ✨ Generated from Field `Student`.`tutorId_count` of type `Int!`
  """
  tutorId_count: Int_Filter
  """
  ✨ Generated from Field `Student`.`type_count` of type `Int!`
  """
  type_count: Int_Filter
  """
  ✨ Generated from Field `Student`.`dob_min` of type `Date`
  """
  dob_min: Date_Filter
  """
  ✨ Generated from Field `Student`.`dob_max` of type `Date`
  """
  dob_max: Date_Filter
}
"""
✨ Generated key input type for table 'Student'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Student_Key {
  """
  ✨ Generated from Field `Student`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Student`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Student'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Student_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Student_Filter
}
"""
✨ Generated order input type for table 'Student'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Student_Order {
  """
  ✨ Generated from Field `Student`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Student`.`tutorId` of type `UUID!`
  """
  tutorId: OrderDirection
  """
  ✨ Generated from Field `Student`.`tutor` of type `Tutor!`
  """
  tutor: Tutor_Order
  """
  ✨ Generated from Field `Student`.`address` of type `String!`
  """
  address: OrderDirection
  """
  ✨ Generated from Field `Student`.`dob` of type `Date!`
  """
  dob: OrderDirection
  """
  ✨ Generated from Field `Student`.`email` of type `String!`
  """
  email: OrderDirection
  """
  ✨ Generated from Field `Student`.`gender` of type `String!`
  """
  gender: OrderDirection
  """
  ✨ Generated from Field `Student`.`name` of type `String!`
  """
  name: OrderDirection
  """
  ✨ Generated from Field `Student`.`phoneNo` of type `String!`
  """
  phoneNo: OrderDirection
  """
  ✨ Generated from Field `Student`.`school` of type `String!`
  """
  school: OrderDirection
  """
  ✨ Generated from Field `Student`.`status` of type `String!`
  """
  status: OrderDirection
  """
  ✨ Generated from Field `Student`.`tuitionLoc` of type `String!`
  """
  tuitionLoc: OrderDirection
  """
  ✨ Generated from Field `Student`.`type` of type `String!`
  """
  type: OrderDirection
}
"""
✨ Generated data input type for table 'Tutor'. It includes all necessary fields for creating or upserting rows into table.
"""
input Tutor_Data {
  """
  ✨ Generated from Field `Tutor`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Tutor`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Tutor`.`address` of type `String`
  """
  address: String
  """
  ✨ `_expr` server value variant of `address` (✨ Generated from Field `Tutor`.`address` of type `String`)
  """
  address_expr: String_Expr
  """
  ✨ Generated from Field `Tutor`.`email` of type `String`
  """
  email: String
  """
  ✨ `_expr` server value variant of `email` (✨ Generated from Field `Tutor`.`email` of type `String`)
  """
  email_expr: String_Expr
  """
  ✨ Generated from Field `Tutor`.`gender` of type `String`
  """
  gender: String
  """
  ✨ `_expr` server value variant of `gender` (✨ Generated from Field `Tutor`.`gender` of type `String`)
  """
  gender_expr: String_Expr
  """
  ✨ Generated from Field `Tutor`.`name` of type `String!`
  """
  name: String
  """
  ✨ `_expr` server value variant of `name` (✨ Generated from Field `Tutor`.`name` of type `String!`)
  """
  name_expr: String_Expr
  """
  ✨ Generated from Field `Tutor`.`phoneNo` of type `String`
  """
  phoneNo: String
  """
  ✨ `_expr` server value variant of `phoneNo` (✨ Generated from Field `Tutor`.`phoneNo` of type `String`)
  """
  phoneNo_expr: String_Expr
  """
  ✨ Generated from Field `Tutor`.`tutortype` of type `String`
  """
  tutortype: String
  """
  ✨ `_expr` server value variant of `tutortype` (✨ Generated from Field `Tutor`.`tutortype` of type `String`)
  """
  tutortype_expr: String_Expr
}
"""
✨ Generated filter input type for table 'Tutor'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Tutor_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Tutor_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Tutor_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Tutor_Filter!]
  """
  ✨ Generated from Field `Tutor`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Tutor`.`address` of type `String`
  """
  address: String_Filter
  """
  ✨ Generated from Field `Tutor`.`email` of type `String`
  """
  email: String_Filter
  """
  ✨ Generated from Field `Tutor`.`gender` of type `String`
  """
  gender: String_Filter
  """
  ✨ Generated from Field `Tutor`.`name` of type `String!`
  """
  name: String_Filter
  """
  ✨ Generated from Field `Tutor`.`phoneNo` of type `String`
  """
  phoneNo: String_Filter
  """
  ✨ Generated from Field `Tutor`.`tutortype` of type `String`
  """
  tutortype: String_Filter
  """
  ✨ Generated from Field `Tutor`.`students_on_tutor` of type `[Student!]!`
  """
  students_on_tutor: Student_ListFilter
}
"""
✨ Generated first-row input type for table 'Tutor'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Tutor_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Tutor_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Tutor_Filter
}
"""
✨ Generated having input type for table 'Tutor'. This input allows you to filter groups during aggregate queries using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Tutor_Having {
  """
  Apply multiple Having conditions using `AND` logic.
  """
  _and: [Tutor_Having!]
  """
  Whether to apply DISTINCT to the aggregate function.
  """
  _distinct: Boolean
  """
  Negate the result of the provided Having condition.
  """
  _not: Tutor_Having
  """
  Apply multiple Having conditions using `OR` logic.
  """
  _or: [Tutor_Having!]
  """
  ✨ Generated from Field `Tutor`.`_count` of type `Int!`
  """
  _count: Int_Filter
  """
  ✨ Generated from Field `Tutor`.`address_count` of type `Int!`
  """
  address_count: Int_Filter
  """
  ✨ Generated from Field `Tutor`.`email_count` of type `Int!`
  """
  email_count: Int_Filter
  """
  ✨ Generated from Field `Tutor`.`gender_count` of type `Int!`
  """
  gender_count: Int_Filter
  """
  ✨ Generated from Field `Tutor`.`id_count` of type `Int!`
  """
  id_count: Int_Filter
  """
  ✨ Generated from Field `Tutor`.`name_count` of type `Int!`
  """
  name_count: Int_Filter
  """
  ✨ Generated from Field `Tutor`.`phoneNo_count` of type `Int!`
  """
  phoneNo_count: Int_Filter
  """
  ✨ Generated from Field `Tutor`.`tutortype_count` of type `Int!`
  """
  tutortype_count: Int_Filter
}
"""
✨ Generated key input type for table 'Tutor'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Tutor_Key {
  """
  ✨ Generated from Field `Tutor`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Tutor`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Tutor'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Tutor_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Tutor_Filter
}
"""
✨ Generated order input type for table 'Tutor'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Tutor_Order {
  """
  ✨ Generated from Field `Tutor`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Tutor`.`address` of type `String`
  """
  address: OrderDirection
  """
  ✨ Generated from Field `Tutor`.`email` of type `String`
  """
  email: OrderDirection
  """
  ✨ Generated from Field `Tutor`.`gender` of type `String`
  """
  gender: OrderDirection
  """
  ✨ Generated from Field `Tutor`.`name` of type `String!`
  """
  name: OrderDirection
  """
  ✨ Generated from Field `Tutor`.`phoneNo` of type `String`
  """
  phoneNo: OrderDirection
  """
  ✨ Generated from Field `Tutor`.`tutortype` of type `String`
  """
  tutortype: OrderDirection
}

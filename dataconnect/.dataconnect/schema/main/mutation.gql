extend type Mutation {
  """
  ✨ Insert a single `Student` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  student_insert(
    """
    Data object to insert into the table.
    """
    data: Student_Data!
  ): Student_KeyOutput! @fdc_generated(from: "Student", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Tutor` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  tutor_insert(
    """
    Data object to insert into the table.
    """
    data: Tutor_Data!
  ): Tutor_KeyOutput! @fdc_generated(from: "Tutor", purpose: INSERT_SINGLE)
  """
  ✨ Insert `Student` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  student_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Student_Data!]!
  ): [Student_KeyOutput!]! @fdc_generated(from: "Student", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Tutor` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  tutor_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Tutor_Data!]!
  ): [Tutor_KeyOutput!]! @fdc_generated(from: "Tutor", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `Student` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Student`.
  """
  student_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Student_Data!
  ): Student_KeyOutput! @fdc_generated(from: "Student", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Tutor` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Tutor`.
  """
  tutor_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Tutor_Data!
  ): Tutor_KeyOutput! @fdc_generated(from: "Tutor", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update `Student` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Student`.
  """
  student_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Student_Data!]!
  ): [Student_KeyOutput!]! @fdc_generated(from: "Student", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Tutor` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Tutor`.
  """
  tutor_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Tutor_Data!]!
  ): [Tutor_KeyOutput!]! @fdc_generated(from: "Tutor", purpose: UPSERT_MULTIPLE)
  """
  ✨ Update a single `Student` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Student` or `null` if not found.
  """
  student_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Student_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Student_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Student_Data!
  ): Student_KeyOutput @fdc_generated(from: "Student", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Tutor` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Tutor` or `null` if not found.
  """
  tutor_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Tutor_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Tutor_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Tutor_Data!
  ): Tutor_KeyOutput @fdc_generated(from: "Tutor", purpose: UPDATE_SINGLE)
  """
  ✨ Update `Student` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  student_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Student_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Student_Data!
  ): Int! @fdc_generated(from: "Student", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Tutor` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  tutor_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Tutor_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Tutor_Data!
  ): Int! @fdc_generated(from: "Tutor", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `Student` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  student_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Student_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Student_FirstRow
  ): Student_KeyOutput @fdc_generated(from: "Student", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Tutor` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  tutor_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Tutor_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Tutor_FirstRow
  ): Tutor_KeyOutput @fdc_generated(from: "Tutor", purpose: DELETE_SINGLE)
  """
  ✨ Delete `Student` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  student_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Student_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Student", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Tutor` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  tutor_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Tutor_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Tutor", purpose: DELETE_MULTIPLE)
}

mutation updateTutor(
  $name: String!
  $type: String!
  $gender: String!
  $email: String!
  $phoneNumber: String!
  $address: String!
  $calendarId: String
) @auth(level: USER) {
  tutor_update(
    first: { where: { id: { eq_expr: "auth.uid" } } }
    data: {
      name: $name
      type: $type
      gender: $gender
      email: $email
      phoneNumber: $phoneNumber
      address: $address
      calendarId: $calendarId
    }
  )
}

mutation createTutor(
  $name: String!
  $type: String!
  $gender: String!
  $email: String!
  $phoneNumber: String!
  $address: String!
  $calendarId: String
) @auth(level: PUBLIC) {
  tutor_insert(
    data: {
      name: $name
      type: $type
      gender: $gender
      email: $email
      phoneNumber: $phoneNumber
      address: $address
      calendarId: $calendarId
    }
  )
}

mutation createStudent(
  $name: String!
  $type: String! # "online" or "onsite"
  $gender: String! # "male" or "female"
  $dob: Date!
  $school: String!
  $email: String!
  $year: String!
  $phoneNumber: String
  $parentPhoneNumber: String
  $address: String
  $status: String!
  $tutorId: String!
) @auth(level: PUBLIC) {
  student_insert(
    data: {
      name: $name
      type: $type
      gender: $gender
      dob: $dob
      year: $year
      school: $school
      email: $email
      phoneNumber: $phoneNumber
      parentPhoneNumber: $parentPhoneNumber
      address: $address
      status: $status
      tutorId: $tutorId
    }
  )
}

mutation updateStudent(
  $id: UUID
  $name: String!
  $type: String! # "online" or "onsite"
  $gender: String! # "male" or "female"
  $dob: Date!
  $school: String!
  $email: String!
  $year: String!
  $phoneNumber: String!
  $parentPhoneNumber: String!
  $address: String
  $status: String!
) @auth(level: USER) {
  student_update(
    first: { where: { tutorId: { eq_expr: "auth.uid" }, id: { eq: $id } } }
    data: {
      name: $name
      type: $type
      gender: $gender
      dob: $dob
      year: $year
      school: $school
      email: $email
      phoneNumber: $phoneNumber
      parentPhoneNumber: $parentPhoneNumber
      address: $address
      status: $status
    }
  )
}


mutation deleteStudent($id: UUID!) @auth(level: PUBLIC) {
  student_delete(id: $id)
}

mutation createStudentFormURL @auth(level: USER) {
  studentFormURL_insert(data: { tutorId_expr: "auth.uid" })
}

mutation deleteStudentFormURL($id: UUID!) @auth(level: PUBLIC) {
  studentFormURL_delete(id: $id)
}

mutation createTutorStudentSubject(
  $studentId: UUID!
  $subject: String!
  $rate: Float!
  $startTime: Timestamp!
  $endTime: Timestamp!
  $interval: String!
  $eventId: String
  $recurrence: String
) @auth(level: USER) {
  tutorStudentSubject_insert(
    data: {
      tutorId_expr: "auth.uid"
      studentId: $studentId
      subject: $subject
      rate: $rate
      startTime: $startTime
      endTime: $endTime
      interval: $interval
      eventId: $eventId
      recurrence: $recurrence
    }
  )
}

mutation updateTutorStudentSubject(
  $id: UUID!
  $studentId: UUID!
  $subject: String!
  $rate: Float!
  $startTime: Timestamp!
  $endTime: Timestamp!
  $interval: String!
  $eventId: String
  $recurrence: String
) @auth(level: USER) {
  tutorStudentSubject_update(
    first: { where: { tutorId: { eq_expr: "auth.uid" }, id: { eq: $id } } }
    data: {
      tutorId_expr: "auth.uid"
      studentId: $studentId
      subject: $subject
      rate: $rate
      startTime: $startTime
      endTime: $endTime
      interval: $interval
      eventId: $eventId
      recurrence: $recurrence
    }
  )
}

mutation createLessonEvent(
  $tutorStudentSubjectId: UUID!
  $startTime: Timestamp!
  $endTime: Timestamp!
  $status: String
  $notes: String
) @auth(level: USER) {
  lessonEvent_insert(
    data: {
      tutorStudentSubjectId: $tutorStudentSubjectId
      startTime: $startTime
      endTime: $endTime
      status: $status
      notes: $notes
    }
  )
}

mutation updateLessonEvent(
  $id: UUID!
  $tutorStudentSubjectId: UUID!
  $startTime: Timestamp!
  $endTime: Timestamp!
  $status: String
  $notes: String
) @auth(level: USER) {
  lessonEvent_update(
    first: { where: { id: { eq: $id } } }
    data: {
      tutorStudentSubjectId: $tutorStudentSubjectId
      startTime: $startTime
      endTime: $endTime
      status: $status
      notes: $notes
    }
  )
}
